
klever_desafio_tecnico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005408  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f4  080055f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055fc  080055fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c4  20000010  08005614  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040d4  08005614  000240d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e39  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7f  00000000  00000000  00033e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00037d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018509  00000000  00000000  00038d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ffa  00000000  00000000  00051229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe91  00000000  00000000  00064223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001040b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  00104108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005590 	.word	0x08005590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005590 	.word	0x08005590

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000080 	.word	0x20000080

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fcc7 	bl	8000ea4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f9d5 	bl	80008c4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 fabb 	bl	8000a94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051e:	f000 fa8f 	bl	8000a40 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 fa3b 	bl	800099c <MX_ADC1_Init>

  /* Creating Queues ------------------------------------------------------------*/
  adc_post_q = xQueueCreate(5, sizeof(uint16_t));
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	2005      	movs	r0, #5
 800052c:	f003 f9e8 	bl	8003900 <xQueueGenericCreate>
 8000530:	4603      	mov	r3, r0
 8000532:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <main+0xb4>)
 8000534:	6013      	str	r3, [r2, #0]
  LED_post_q = xQueueCreate(5, sizeof(uint8_t));
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	2005      	movs	r0, #5
 800053c:	f003 f9e0 	bl	8003900 <xQueueGenericCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <main+0xb8>)
 8000544:	6013      	str	r3, [r2, #0]
  serial_post_adc_q = xQueueCreate(5, sizeof(uint8_t));
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	2005      	movs	r0, #5
 800054c:	f003 f9d8 	bl	8003900 <xQueueGenericCreate>
 8000550:	4603      	mov	r3, r0
 8000552:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <main+0xbc>)
 8000554:	6013      	str	r3, [r2, #0]
  serial_post_led_q = xQueueCreate(5, sizeof(uint8_t));
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	2005      	movs	r0, #5
 800055c:	f003 f9d0 	bl	8003900 <xQueueGenericCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <main+0xc0>)
 8000564:	6013      	str	r3, [r2, #0]
  serial_isr_q = xQueueCreate(5,sizeof(uint8_t));
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	2005      	movs	r0, #5
 800056c:	f003 f9c8 	bl	8003900 <xQueueGenericCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <main+0xc4>)
 8000574:	6013      	str	r3, [r2, #0]

  /* Creating Tasks ------------------------------------------------------------*/
  xTaskCreate(adc_task, "adc_task", 128, NULL, 2, &adc_task_handle); //Medium priority task
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <main+0xc8>)
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2302      	movs	r3, #2
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	4915      	ldr	r1, [pc, #84]	; (80005d8 <main+0xcc>)
 8000584:	4815      	ldr	r0, [pc, #84]	; (80005dc <main+0xd0>)
 8000586:	f003 fd60 	bl	800404a <xTaskCreate>
  xTaskCreate(led_task, "led_task", 128, NULL, 1, &LED_task_handle); //Lowest priority task
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <main+0xd4>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	4913      	ldr	r1, [pc, #76]	; (80005e4 <main+0xd8>)
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <main+0xdc>)
 800059a:	f003 fd56 	bl	800404a <xTaskCreate>
  xTaskCreate(serial_comm_task, "serial_task", 128, NULL, 3, &serial_comm_handle); //High priority task
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <main+0xe0>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2303      	movs	r3, #3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	4911      	ldr	r1, [pc, #68]	; (80005f0 <main+0xe4>)
 80005ac:	4811      	ldr	r0, [pc, #68]	; (80005f4 <main+0xe8>)
 80005ae:	f003 fd4c 	bl	800404a <xTaskCreate>

  //Starting FreeRTOS scheduler
  vTaskStartScheduler();
 80005b2:	f003 feb5 	bl	8004320 <vTaskStartScheduler>
  /* Infinite loop */
  while (1)
  {
	  //Just feeding task wtd
	  vTaskDelay(pdMS_TO_TICKS(100));
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f003 fe7e 	bl	80042b8 <vTaskDelay>
 80005bc:	e7fb      	b.n	80005b6 <main+0xaa>
 80005be:	bf00      	nop
 80005c0:	20003fdc 	.word	0x20003fdc
 80005c4:	20004038 	.word	0x20004038
 80005c8:	20003fe0 	.word	0x20003fe0
 80005cc:	20003fe8 	.word	0x20003fe8
 80005d0:	20003fec 	.word	0x20003fec
 80005d4:	20003fe4 	.word	0x20003fe4
 80005d8:	080055a8 	.word	0x080055a8
 80005dc:	080007bd 	.word	0x080007bd
 80005e0:	20003fd4 	.word	0x20003fd4
 80005e4:	080055b4 	.word	0x080055b4
 80005e8:	0800081d 	.word	0x0800081d
 80005ec:	20003fd8 	.word	0x20003fd8
 80005f0:	080055c0 	.word	0x080055c0
 80005f4:	08000669 	.word	0x08000669

080005f8 <checksum_calc>:
  }
}
/* Simple function to calculate checksum of data
 */
uint8_t checksum_calc(uint8_t *data, int length){
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	int sum = 0, i = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
	while(i < length){
 800060a:	e00a      	b.n	8000622 <checksum_calc+0x2a>
		sum += data[i];
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
		i ++;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	3301      	adds	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
	while(i < length){
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	dbf0      	blt.n	800060c <checksum_calc+0x14>
	}
	return (uint8_t)sum;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <HAL_UART_RxCpltCallback>:
// Every time data is received from ISR, this function is called.
// It's used to set a flag to serial comm task
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t flag_to_send = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
	// Just put a flag in queue to notify serial task that data has been received
	xQueueSend(serial_isr_q, &flag_to_send, portMAX_DELAY);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_UART_RxCpltCallback+0x28>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	f107 010f 	add.w	r1, r7, #15
 8000650:	2300      	movs	r3, #0
 8000652:	f04f 32ff 	mov.w	r2, #4294967295
 8000656:	f003 f9ad 	bl	80039b4 <xQueueGenericSend>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20003fec 	.word	0x20003fec

08000668 <serial_comm_task>:

/* Serial communication task */
void serial_comm_task(void *param){
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b087      	sub	sp, #28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t recv_data_flag, led_ack, command;
	uint8_t ack = 0x02; //ACk response to led command (wasn't specified in the
 8000670:	2302      	movs	r3, #2
 8000672:	74fb      	strb	r3, [r7, #19]
	uint8_t recv_size = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	75fb      	strb	r3, [r7, #23]
	uint8_t send_buffer[6] = {0x01, 0x05, 0x02, 0x00, 0x00, 0x00};
 8000678:	4a48      	ldr	r2, [pc, #288]	; (800079c <serial_comm_task+0x134>)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000682:	6018      	str	r0, [r3, #0]
 8000684:	3304      	adds	r3, #4
 8000686:	8019      	strh	r1, [r3, #0]
	* 4º byte - Parameters (when needed)
	* last byte - checksum
	* When no parameters is present, the message will have 4 byte.
	* The max size of message is 6 (when reading the 12 bits ADC)
	*/
	HAL_UART_Receive_IT(&huart2, recv_buffer, recv_size);
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	b29b      	uxth	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	4944      	ldr	r1, [pc, #272]	; (80007a0 <serial_comm_task+0x138>)
 8000690:	4844      	ldr	r0, [pc, #272]	; (80007a4 <serial_comm_task+0x13c>)
 8000692:	f002 fadb 	bl	8002c4c <HAL_UART_Receive_IT>

	while(1){
		//received data flag set
		if(xQueueReceive(serial_isr_q, &recv_data_flag, pdMS_TO_TICKS(10)) == pdTRUE){
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <serial_comm_task+0x140>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f107 0116 	add.w	r1, r7, #22
 800069e:	220a      	movs	r2, #10
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fa85 	bl	8003bb0 <xQueueReceive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d13b      	bne.n	8000724 <serial_comm_task+0xbc>
			//CHeck if the first byte of message is 0x01 and if the checksum of received data is valid
			if(recv_buffer[0] == MESSAGE_HEADER && recv_buffer[3]==checksum_calc(recv_buffer, 3)){
 80006ac:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <serial_comm_task+0x138>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d136      	bne.n	8000722 <serial_comm_task+0xba>
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <serial_comm_task+0x138>)
 80006b6:	78dc      	ldrb	r4, [r3, #3]
 80006b8:	2103      	movs	r1, #3
 80006ba:	4839      	ldr	r0, [pc, #228]	; (80007a0 <serial_comm_task+0x138>)
 80006bc:	f7ff ff9c 	bl	80005f8 <checksum_calc>
 80006c0:	4603      	mov	r3, r0
 80006c2:	429c      	cmp	r4, r3
 80006c4:	d12d      	bne.n	8000722 <serial_comm_task+0xba>
				// Check command byte
				command = recv_buffer[1];
 80006c6:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <serial_comm_task+0x138>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	753b      	strb	r3, [r7, #20]
				switch(command){
 80006cc:	7d3b      	ldrb	r3, [r7, #20]
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	d01b      	beq.n	800070a <serial_comm_task+0xa2>
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	dc23      	bgt.n	800071e <serial_comm_task+0xb6>
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	dc02      	bgt.n	80006e0 <serial_comm_task+0x78>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dc03      	bgt.n	80006e6 <serial_comm_task+0x7e>
					case ADC_READ:
						//Send received command to adc buffer
						xQueueSend(serial_post_adc_q, &command, portMAX_DELAY);
						break;
					default:
						break;
 80006de:	e01e      	b.n	800071e <serial_comm_task+0xb6>
				switch(command){
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	d00a      	beq.n	80006fa <serial_comm_task+0x92>
						break;
 80006e4:	e01b      	b.n	800071e <serial_comm_task+0xb6>
						xQueueSend(serial_post_led_q, &command, portMAX_DELAY);
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <serial_comm_task+0x144>)
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	f107 0114 	add.w	r1, r7, #20
 80006ee:	2300      	movs	r3, #0
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	f003 f95e 	bl	80039b4 <xQueueGenericSend>
						break;
 80006f8:	e012      	b.n	8000720 <serial_comm_task+0xb8>
						HAL_UART_Transmit_IT(&huart2, recv_buffer, recv_size);
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	4927      	ldr	r1, [pc, #156]	; (80007a0 <serial_comm_task+0x138>)
 8000702:	4828      	ldr	r0, [pc, #160]	; (80007a4 <serial_comm_task+0x13c>)
 8000704:	f002 fa5d 	bl	8002bc2 <HAL_UART_Transmit_IT>
						break;
 8000708:	e00a      	b.n	8000720 <serial_comm_task+0xb8>
						xQueueSend(serial_post_adc_q, &command, portMAX_DELAY);
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <serial_comm_task+0x148>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f107 0114 	add.w	r1, r7, #20
 8000712:	2300      	movs	r3, #0
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	f003 f94c 	bl	80039b4 <xQueueGenericSend>
						break;
 800071c:	e000      	b.n	8000720 <serial_comm_task+0xb8>
						break;
 800071e:	bf00      	nop
				switch(command){
 8000720:	e000      	b.n	8000724 <serial_comm_task+0xbc>
				}
			}
			else{
				//Since no treatment for error or corrupted message was asked, i will just leave a NOP here;
				__NOP();
 8000722:	bf00      	nop
			}
		}
		//received flag from led task, meaning command was acknowledge
		if(xQueueReceive(LED_post_q,&led_ack,pdMS_TO_TICKS(10)) == pdTRUE){
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <serial_comm_task+0x14c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f107 0115 	add.w	r1, r7, #21
 800072c:	220a      	movs	r2, #10
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fa3e 	bl	8003bb0 <xQueueReceive>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d109      	bne.n	800074e <serial_comm_task+0xe6>
			if(led_ack == 1){
 800073a:	7d7b      	ldrb	r3, [r7, #21]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d106      	bne.n	800074e <serial_comm_task+0xe6>
				HAL_UART_Transmit_IT(&huart2, &ack, 1);
 8000740:	f107 0313 	add.w	r3, r7, #19
 8000744:	2201      	movs	r2, #1
 8000746:	4619      	mov	r1, r3
 8000748:	4816      	ldr	r0, [pc, #88]	; (80007a4 <serial_comm_task+0x13c>)
 800074a:	f002 fa3a 	bl	8002bc2 <HAL_UART_Transmit_IT>
			}
		}
		if(xQueueReceive(adc_post_q, &adc_data, pdMS_TO_TICKS(10))){
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <serial_comm_task+0x150>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f107 010a 	add.w	r1, r7, #10
 8000756:	220a      	movs	r2, #10
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fa29 	bl	8003bb0 <xQueueReceive>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d016      	beq.n	8000792 <serial_comm_task+0x12a>
			send_buffer[3] = (uint8_t) (adc_data>>8); //MSB
 8000764:	897b      	ldrh	r3, [r7, #10]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	73fb      	strb	r3, [r7, #15]
			send_buffer[4] = (uint8_t) adc_data; 	  //LSB
 800076e:	897b      	ldrh	r3, [r7, #10]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	743b      	strb	r3, [r7, #16]
			send_buffer[5] = checksum_calc(send_buffer, 5); //Calculate checksum
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff3c 	bl	80005f8 <checksum_calc>
 8000780:	4603      	mov	r3, r0
 8000782:	747b      	strb	r3, [r7, #17]
			HAL_UART_Transmit_IT(&huart2, send_buffer, 6);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2206      	movs	r2, #6
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <serial_comm_task+0x13c>)
 800078e:	f002 fa18 	bl	8002bc2 <HAL_UART_Transmit_IT>
		}
		//Just feeding task wtd
		vTaskDelay(pdMS_TO_TICKS(100));
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f003 fd90 	bl	80042b8 <vTaskDelay>
		if(xQueueReceive(serial_isr_q, &recv_data_flag, pdMS_TO_TICKS(10)) == pdTRUE){
 8000798:	e77d      	b.n	8000696 <serial_comm_task+0x2e>
 800079a:	bf00      	nop
 800079c:	080055cc 	.word	0x080055cc
 80007a0:	2000403c 	.word	0x2000403c
 80007a4:	20004044 	.word	0x20004044
 80007a8:	20003fec 	.word	0x20003fec
 80007ac:	20003fe8 	.word	0x20003fe8
 80007b0:	20003fe0 	.word	0x20003fe0
 80007b4:	20004038 	.word	0x20004038
 80007b8:	20003fdc 	.word	0x20003fdc

080007bc <adc_task>:
	}
}
void adc_task(void *param){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint8_t adc_flag;
	uint16_t adc_value;
	while(1){
		if(xQueueReceive(serial_post_adc_q, &adc_flag, pdMS_TO_TICKS(10))==pdTRUE){
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <adc_task+0x54>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f107 010f 	add.w	r1, r7, #15
 80007cc:	220a      	movs	r2, #10
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f9ee 	bl	8003bb0 <xQueueReceive>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d116      	bne.n	8000808 <adc_task+0x4c>
			// Starts AD conversion
			HAL_ADC_Start(&hadc1);
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <adc_task+0x58>)
 80007dc:	f000 fbe8 	bl	8000fb0 <HAL_ADC_Start>
			// Block process until AD conversion is done
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <adc_task+0x58>)
 80007e6:	f000 fc97 	bl	8001118 <HAL_ADC_PollForConversion>
			// Get raw value
			adc_value = (uint16_t) HAL_ADC_GetValue(&hadc1);
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <adc_task+0x58>)
 80007ec:	f000 fd1f 	bl	800122e <HAL_ADC_GetValue>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	81bb      	strh	r3, [r7, #12]
			// post value in the queue
			xQueueSend(adc_post_q, &adc_value, portMAX_DELAY);
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <adc_task+0x5c>)
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	f107 010c 	add.w	r1, r7, #12
 80007fe:	2300      	movs	r3, #0
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	f003 f8d6 	bl	80039b4 <xQueueGenericSend>
		}
		//Just feeding task wtd
		vTaskDelay(pdMS_TO_TICKS(100));
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f003 fd55 	bl	80042b8 <vTaskDelay>
		if(xQueueReceive(serial_post_adc_q, &adc_flag, pdMS_TO_TICKS(10))==pdTRUE){
 800080e:	e7d9      	b.n	80007c4 <adc_task+0x8>
 8000810:	20003fe0 	.word	0x20003fe0
 8000814:	20003ff0 	.word	0x20003ff0
 8000818:	20003fdc 	.word	0x20003fdc

0800081c <led_task>:
	}
}
void led_task(void *param){
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	uint8_t led_cmd;
	uint8_t ack_flag = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	73bb      	strb	r3, [r7, #14]
	while(1){
		// led command was received
		if(xQueueReceive(serial_post_led_q, &led_cmd, pdMS_TO_TICKS(10))==pdTRUE){
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <led_task+0x9c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	220a      	movs	r2, #10
 8000832:	4618      	mov	r0, r3
 8000834:	f003 f9bc 	bl	8003bb0 <xQueueReceive>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d135      	bne.n	80008aa <led_task+0x8e>
			switch(led_cmd){
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d024      	beq.n	800088e <led_task+0x72>
 8000844:	2b03      	cmp	r3, #3
 8000846:	dc32      	bgt.n	80008ae <led_task+0x92>
 8000848:	2b01      	cmp	r3, #1
 800084a:	d002      	beq.n	8000852 <led_task+0x36>
 800084c:	2b02      	cmp	r3, #2
 800084e:	d00f      	beq.n	8000870 <led_task+0x54>
					//Toggle LED
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					xQueueSend(LED_post_q, &ack_flag, portMAX_DELAY);
					break;
				default:
					break;
 8000850:	e02d      	b.n	80008ae <led_task+0x92>
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2120      	movs	r1, #32
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <led_task+0xa0>)
 8000858:	f001 fa0c 	bl	8001c74 <HAL_GPIO_WritePin>
					xQueueSend(LED_post_q, &ack_flag, portMAX_DELAY);
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <led_task+0xa4>)
 800085e:	6818      	ldr	r0, [r3, #0]
 8000860:	f107 010e 	add.w	r1, r7, #14
 8000864:	2300      	movs	r3, #0
 8000866:	f04f 32ff 	mov.w	r2, #4294967295
 800086a:	f003 f8a3 	bl	80039b4 <xQueueGenericSend>
					break;
 800086e:	e01f      	b.n	80008b0 <led_task+0x94>
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2120      	movs	r1, #32
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <led_task+0xa0>)
 8000876:	f001 f9fd 	bl	8001c74 <HAL_GPIO_WritePin>
					xQueueSend(LED_post_q, &ack_flag, portMAX_DELAY);
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <led_task+0xa4>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	f107 010e 	add.w	r1, r7, #14
 8000882:	2300      	movs	r3, #0
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	f003 f894 	bl	80039b4 <xQueueGenericSend>
					break;
 800088c:	e010      	b.n	80008b0 <led_task+0x94>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800088e:	2120      	movs	r1, #32
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <led_task+0xa0>)
 8000892:	f001 fa08 	bl	8001ca6 <HAL_GPIO_TogglePin>
					xQueueSend(LED_post_q, &ack_flag, portMAX_DELAY);
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <led_task+0xa4>)
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	f107 010e 	add.w	r1, r7, #14
 800089e:	2300      	movs	r3, #0
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	f003 f886 	bl	80039b4 <xQueueGenericSend>
					break;
 80008a8:	e002      	b.n	80008b0 <led_task+0x94>
			}
		}
 80008aa:	bf00      	nop
 80008ac:	e000      	b.n	80008b0 <led_task+0x94>
					break;
 80008ae:	bf00      	nop
		//Just feeding task wtd
		vTaskDelay(pdMS_TO_TICKS(100));
 80008b0:	2064      	movs	r0, #100	; 0x64
 80008b2:	f003 fd01 	bl	80042b8 <vTaskDelay>
		if(xQueueReceive(serial_post_led_q, &led_cmd, pdMS_TO_TICKS(10))==pdTRUE){
 80008b6:	e7b7      	b.n	8000828 <led_task+0xc>
 80008b8:	20003fe8 	.word	0x20003fe8
 80008bc:	40020000 	.word	0x40020000
 80008c0:	20004038 	.word	0x20004038

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fe54 	bl	8005580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <SystemClock_Config+0xd0>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xd4>)
 8000912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2310      	movs	r3, #16
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000938:	2310      	movs	r3, #16
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800093c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000942:	2304      	movs	r3, #4
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000946:	2307      	movs	r3, #7
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f9c4 	bl	8001cdc <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800095a:	f000 f91d 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2302      	movs	r3, #2
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fc26 	bl	80021cc <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000986:	f000 f907 	bl	8000b98 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	; 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <MX_ADC1_Init+0x9c>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_ADC1_Init+0xa0>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_ADC1_Init+0x98>)
 80009fe:	f000 fa93 	bl	8000f28 <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f8c6 	bl	8000b98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_ADC1_Init+0x98>)
 8000a1e:	f000 fc13 	bl	8001248 <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a28:	f000 f8b6 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20003ff0 	.word	0x20003ff0
 8000a38:	40012000 	.word	0x40012000
 8000a3c:	0f000001 	.word	0x0f000001

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART2_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a78:	f002 f856 	bl	8002b28 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f889 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20004044 	.word	0x20004044
 8000a90:	40004400 	.word	0x40004400

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2c      	ldr	r2, [pc, #176]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	4812      	ldr	r0, [pc, #72]	; (8000b68 <MX_GPIO_Init+0xd4>)
 8000b20:	f001 f8a8 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_GPIO_Init+0xd8>)
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b3a:	f000 ff17 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_GPIO_Init+0xd4>)
 8000b56:	f000 ff09 	bl	800196c <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	10210000 	.word	0x10210000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 f9af 	bl	8000ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40000c00 	.word	0x40000c00

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0001 	mvn.w	r0, #1
 8000bea:	f000 fe03 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_ADC_MspInit+0x7c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d127      	bne.n	8000c6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_ADC_MspInit+0x84>)
 8000c6a:	f000 fe7f 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40012000 	.word	0x40012000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_UART_MspInit+0x94>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d133      	bne.n	8000d0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cfa:	f000 fe37 	bl	800196c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2026      	movs	r0, #38	; 0x26
 8000d04:	f000 fd76 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d08:	2026      	movs	r0, #38	; 0x26
 8000d0a:	f000 fd8f 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2032      	movs	r0, #50	; 0x32
 8000d3a:	f000 fd5b 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d3e:	2032      	movs	r0, #50	; 0x32
 8000d40:	f000 fd74 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_InitTick+0xa4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_InitTick+0xa4>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_InitTick+0xa4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d60:	f107 0210 	add.w	r2, r7, #16
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fc2a 	bl	80025c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d70:	f001 fc00 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8000d74:	4603      	mov	r3, r0
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <HAL_InitTick+0xa8>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	0c9b      	lsrs	r3, r3, #18
 8000d84:	3b01      	subs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_InitTick+0xb0>)
 8000d8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d94:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_InitTick+0xac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <HAL_InitTick+0xac>)
 8000daa:	f001 fc3d 	bl	8002628 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <HAL_InitTick+0xac>)
 8000db6:	f001 fc91 	bl	80026dc <HAL_TIM_Base_Start_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	20004088 	.word	0x20004088
 8000dd4:	40000c00 	.word	0x40000c00

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <USART2_IRQHandler+0x10>)
 8000e0a:	f001 ff4f 	bl	8002cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20004044 	.word	0x20004044

08000e18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM5_IRQHandler+0x10>)
 8000e1e:	f001 fcbf 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20004088 	.word	0x20004088

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f004 fb4d 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb43 	bl	800050c <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e94:	08005604 	.word	0x08005604
  ldr r2, =_sbss
 8000e98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e9c:	200040d4 	.word	0x200040d4

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fc86 	bl	80017de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff26 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fe64 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	200040d0 	.word	0x200040d0

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200040d0 	.word	0x200040d0

08000f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e033      	b.n	8000fa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d109      	bne.n	8000f5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fe58 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d118      	bne.n	8000f98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	f043 0202 	orr.w	r2, r3, #2
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fa86 	bl	800148c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
 8000f96:	e001      	b.n	8000f9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Start+0x1a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e097      	b.n	80010fa <HAL_ADC_Start+0x14a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d018      	beq.n	8001012 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff0:	4b45      	ldr	r3, [pc, #276]	; (8001108 <HAL_ADC_Start+0x158>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a45      	ldr	r2, [pc, #276]	; (800110c <HAL_ADC_Start+0x15c>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9a      	lsrs	r2, r3, #18
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001004:	e002      	b.n	800100c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3b01      	subs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d15f      	bne.n	80010e0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800104a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800105e:	d106      	bne.n	800106e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	f023 0206 	bic.w	r2, r3, #6
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
 800106c:	e002      	b.n	8001074 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_ADC_Start+0x160>)
 800107e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001088:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10f      	bne.n	80010b6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d129      	bne.n	80010f8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	e020      	b.n	80010f8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_ADC_Start+0x164>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d11b      	bne.n	80010f8 <HAL_ADC_Start+0x148>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d114      	bne.n	80010f8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	e00b      	b.n	80010f8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f043 0210 	orr.w	r2, r3, #16
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000
 800110c:	431bde83 	.word	0x431bde83
 8001110:	40012300 	.word	0x40012300
 8001114:	40012000 	.word	0x40012000

08001118 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	d113      	bne.n	800115e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001144:	d10b      	bne.n	800115e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f043 0220 	orr.w	r2, r3, #32
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e063      	b.n	8001226 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800115e:	f7ff fed7 	bl	8000f10 <HAL_GetTick>
 8001162:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001164:	e021      	b.n	80011aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d01d      	beq.n	80011aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_ADC_PollForConversion+0x6c>
 8001174:	f7ff fecc 	bl	8000f10 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d212      	bcs.n	80011aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b02      	cmp	r3, #2
 8001190:	d00b      	beq.n	80011aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f043 0204 	orr.w	r2, r3, #4
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e03d      	b.n	8001226 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d1d6      	bne.n	8001166 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0212 	mvn.w	r2, #18
 80011c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d123      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d11f      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1c>
 8001260:	2302      	movs	r3, #2
 8001262:	e105      	b.n	8001470 <HAL_ADC_ConfigChannel+0x228>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d925      	bls.n	80012c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68d9      	ldr	r1, [r3, #12]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43da      	mvns	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	400a      	ands	r2, r1
 8001298:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68d9      	ldr	r1, [r3, #12]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4403      	add	r3, r0
 80012b2:	3b1e      	subs	r3, #30
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	e022      	b.n	8001306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6919      	ldr	r1, [r3, #16]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	2207      	movs	r2, #7
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	400a      	ands	r2, r1
 80012e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4403      	add	r3, r0
 80012fc:	409a      	lsls	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d824      	bhi.n	8001358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b05      	subs	r3, #5
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b05      	subs	r3, #5
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
 8001356:	e04c      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0c      	cmp	r3, #12
 800135e:	d824      	bhi.n	80013aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3b23      	subs	r3, #35	; 0x23
 8001372:	221f      	movs	r2, #31
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43da      	mvns	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b23      	subs	r3, #35	; 0x23
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	e023      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b41      	subs	r3, #65	; 0x41
 80013bc:	221f      	movs	r2, #31
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	400a      	ands	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3b41      	subs	r3, #65	; 0x41
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_ADC_ConfigChannel+0x234>)
 80013f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <HAL_ADC_ConfigChannel+0x238>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d109      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1cc>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d105      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_ADC_ConfigChannel+0x238>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d123      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d003      	beq.n	800142e <HAL_ADC_ConfigChannel+0x1e6>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b11      	cmp	r3, #17
 800142c:	d11b      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d111      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_ADC_ConfigChannel+0x23c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_ADC_ConfigChannel+0x240>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9a      	lsrs	r2, r3, #18
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001458:	e002      	b.n	8001460 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3b01      	subs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40012300 	.word	0x40012300
 8001480:	40012000 	.word	0x40012000
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001494:	4b79      	ldr	r3, [pc, #484]	; (800167c <ADC_Init+0x1f0>)
 8001496:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	021a      	lsls	r2, r3, #8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	4a58      	ldr	r2, [pc, #352]	; (8001680 <ADC_Init+0x1f4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6899      	ldr	r1, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e00f      	b.n	800158a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0202 	bic.w	r2, r2, #2
 8001598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
 80015a4:	005a      	lsls	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	3b01      	subs	r3, #1
 80015e4:	035a      	lsls	r2, r3, #13
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e007      	b.n	8001600 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	3b01      	subs	r3, #1
 800161c:	051a      	lsls	r2, r3, #20
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6899      	ldr	r1, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	029a      	lsls	r2, r3, #10
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40012300 	.word	0x40012300
 8001680:	0f000001 	.word	0x0f000001

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001806:	f7ff ff61 	bl	80016cc <__NVIC_GetPriorityGrouping>
 800180a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	6978      	ldr	r0, [r7, #20]
 8001812:	f7ff ffb1 	bl	8001778 <NVIC_EncodePriority>
 8001816:	4602      	mov	r2, r0
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff80 	bl	8001724 <__NVIC_SetPriority>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff54 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001856:	f7ff fb5b 	bl	8000f10 <HAL_GetTick>
 800185a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d008      	beq.n	800187a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e052      	b.n	8001920 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0216 	bic.w	r2, r2, #22
 8001888:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001898:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <HAL_DMA_Abort+0x62>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0208 	bic.w	r2, r2, #8
 80018b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ca:	e013      	b.n	80018f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018cc:	f7ff fb20 	bl	8000f10 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d90c      	bls.n	80018f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e015      	b.n	8001920 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1e4      	bne.n	80018cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	223f      	movs	r2, #63	; 0x3f
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00c      	b.n	8001960 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2205      	movs	r2, #5
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e159      	b.n	8001c3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8148 	bne.w	8001c36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d005      	beq.n	80019be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d130      	bne.n	8001a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d123      	bne.n	8001ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a2 	beq.w	8001c36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_GPIO_Init+0x2e8>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a56      	ldr	r2, [pc, #344]	; (8001c54 <HAL_GPIO_Init+0x2e8>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <HAL_GPIO_Init+0x2e8>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0e:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_GPIO_Init+0x2ec>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d019      	beq.n	8001b6e <HAL_GPIO_Init+0x202>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_GPIO_Init+0x1fe>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a47      	ldr	r2, [pc, #284]	; (8001c64 <HAL_GPIO_Init+0x2f8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00d      	beq.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a46      	ldr	r2, [pc, #280]	; (8001c68 <HAL_GPIO_Init+0x2fc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d007      	beq.n	8001b62 <HAL_GPIO_Init+0x1f6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a45      	ldr	r2, [pc, #276]	; (8001c6c <HAL_GPIO_Init+0x300>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_GPIO_Init+0x1f2>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x204>
 8001b5e:	2307      	movs	r3, #7
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x204>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x204>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x204>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x204>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b80:	4935      	ldr	r1, [pc, #212]	; (8001c58 <HAL_GPIO_Init+0x2ec>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bdc:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c30:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	f67f aea2 	bls.w	8001988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40013c00 	.word	0x40013c00

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	041a      	lsls	r2, r3, #16
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e264      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d075      	beq.n	8001de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfa:	4ba3      	ldr	r3, [pc, #652]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d00c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d06:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d112      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d12:	4b9d      	ldr	r3, [pc, #628]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	4b99      	ldr	r3, [pc, #612]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d157      	bne.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e23f      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x74>
 8001d42:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a90      	ldr	r2, [pc, #576]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x98>
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a87      	ldr	r2, [pc, #540]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d74:	4b84      	ldr	r3, [pc, #528]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a83      	ldr	r2, [pc, #524]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a80      	ldr	r2, [pc, #512]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff f8bc 	bl	8000f10 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f8b8 	bl	8000f10 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e204      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b76      	ldr	r3, [pc, #472]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f8a8 	bl	8000f10 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f8a4 	bl	8000f10 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1f0      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d063      	beq.n	8001eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df2:	4b65      	ldr	r3, [pc, #404]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x152>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1c4      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4952      	ldr	r1, [pc, #328]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e03a      	b.n	8001eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCC_OscConfig+0x2b0>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff f85d 	bl	8000f10 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f859 	bl	8000f10 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1a5      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4940      	ldr	r1, [pc, #256]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_OscConfig+0x2b0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f83c 	bl	8000f10 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f838 	bl	8000f10 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e184      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d030      	beq.n	8001f28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_RCC_OscConfig+0x2b4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f81c 	bl	8000f10 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff f818 	bl	8000f10 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e164      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x200>
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_OscConfig+0x2b4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f805 	bl	8000f10 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f801 	bl	8000f10 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e14d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a0 	beq.w	8002076 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x2b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_RCC_OscConfig+0x2b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ffc7 	bl	8000f10 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e011      	b.n	8001faa <HAL_RCC_OscConfig+0x2ce>
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470000 	.word	0x42470000
 8001f90:	42470e80 	.word	0x42470e80
 8001f94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe ffba 	bl	8000f10 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e106      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <HAL_RCC_OscConfig+0x4e4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
 8001fbe:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a80      	ldr	r2, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fca:	e01c      	b.n	8002006 <HAL_RCC_OscConfig+0x32a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x312>
 8001fd4:	4b7b      	ldr	r3, [pc, #492]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a7a      	ldr	r2, [pc, #488]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	4b78      	ldr	r3, [pc, #480]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	4a77      	ldr	r2, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	; 0x70
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x32a>
 8001fee:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a74      	ldr	r2, [pc, #464]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	4b72      	ldr	r3, [pc, #456]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a71      	ldr	r2, [pc, #452]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7fe ff7f 	bl	8000f10 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe ff7b 	bl	8000f10 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0c5      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCC_OscConfig+0x33a>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe ff69 	bl	8000f10 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe ff65 	bl	8000f10 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0af      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a55      	ldr	r2, [pc, #340]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 809b 	beq.w	80021b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d05c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d141      	bne.n	8002118 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x4ec>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe ff39 	bl	8000f10 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a2:	f7fe ff35 	bl	8000f10 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e081      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3b01      	subs	r3, #1
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	4937      	ldr	r1, [pc, #220]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_OscConfig+0x4ec>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff0e 	bl	8000f10 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe ff0a 	bl	8000f10 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e056      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x41c>
 8002116:	e04e      	b.n	80021b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_OscConfig+0x4ec>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fef7 	bl	8000f10 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fef3 	bl	8000f10 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e03f      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x44a>
 8002144:	e037      	b.n	80021b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e032      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_RCC_OscConfig+0x4e8>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d028      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d121      	bne.n	80021b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d11a      	bne.n	80021b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002188:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218a:	4293      	cmp	r3, r2
 800218c:	d111      	bne.n	80021b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40007000 	.word	0x40007000
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470060 	.word	0x42470060

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0cc      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d90c      	bls.n	8002208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d044      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e067      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4934      	ldr	r1, [pc, #208]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fe28 	bl	8000f10 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7fe fe24 	bl	8000f10 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d20c      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490a      	ldr	r1, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fcd6 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00
 8002388:	40023800 	.word	0x40023800
 800238c:	080055dc 	.word	0x080055dc
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	2300      	movs	r3, #0
 80023aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b0:	4b67      	ldr	r3, [pc, #412]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d00d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x40>
 80023bc:	2b08      	cmp	r3, #8
 80023be:	f200 80bd 	bhi.w	800253c <HAL_RCC_GetSysClockFreq+0x1a4>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ca:	e0b7      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023ce:	60bb      	str	r3, [r7, #8]
       break;
 80023d0:	e0b7      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80023d4:	60bb      	str	r3, [r7, #8]
      break;
 80023d6:	e0b4      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d8:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d04d      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	461a      	mov	r2, r3
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	ea02 0800 	and.w	r8, r2, r0
 8002406:	ea03 0901 	and.w	r9, r3, r1
 800240a:	4640      	mov	r0, r8
 800240c:	4649      	mov	r1, r9
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	014b      	lsls	r3, r1, #5
 8002418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800241c:	0142      	lsls	r2, r0, #5
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	ebb0 0008 	subs.w	r0, r0, r8
 8002426:	eb61 0109 	sbc.w	r1, r1, r9
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	018b      	lsls	r3, r1, #6
 8002434:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002438:	0182      	lsls	r2, r0, #6
 800243a:	1a12      	subs	r2, r2, r0
 800243c:	eb63 0301 	sbc.w	r3, r3, r1
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	00d9      	lsls	r1, r3, #3
 800244a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800244e:	00d0      	lsls	r0, r2, #3
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	eb12 0208 	adds.w	r2, r2, r8
 8002458:	eb43 0309 	adc.w	r3, r3, r9
 800245c:	f04f 0000 	mov.w	r0, #0
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	0259      	lsls	r1, r3, #9
 8002466:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800246a:	0250      	lsls	r0, r2, #9
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	461a      	mov	r2, r3
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	f7fd feb0 	bl	80001e0 <__aeabi_uldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4613      	mov	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e04a      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	461a      	mov	r2, r3
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	f240 10ff 	movw	r0, #511	; 0x1ff
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	ea02 0400 	and.w	r4, r2, r0
 80024a2:	ea03 0501 	and.w	r5, r3, r1
 80024a6:	4620      	mov	r0, r4
 80024a8:	4629      	mov	r1, r5
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	014b      	lsls	r3, r1, #5
 80024b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024b8:	0142      	lsls	r2, r0, #5
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	1b00      	subs	r0, r0, r4
 80024c0:	eb61 0105 	sbc.w	r1, r1, r5
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	018b      	lsls	r3, r1, #6
 80024ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024d2:	0182      	lsls	r2, r0, #6
 80024d4:	1a12      	subs	r2, r2, r0
 80024d6:	eb63 0301 	sbc.w	r3, r3, r1
 80024da:	f04f 0000 	mov.w	r0, #0
 80024de:	f04f 0100 	mov.w	r1, #0
 80024e2:	00d9      	lsls	r1, r3, #3
 80024e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024e8:	00d0      	lsls	r0, r2, #3
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	1912      	adds	r2, r2, r4
 80024f0:	eb45 0303 	adc.w	r3, r5, r3
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	0299      	lsls	r1, r3, #10
 80024fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002502:	0290      	lsls	r0, r2, #10
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	f7fd fe64 	bl	80001e0 <__aeabi_uldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4613      	mov	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	3301      	adds	r3, #1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	60bb      	str	r3, [r7, #8]
      break;
 800253a:	e002      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800253e:	60bb      	str	r3, [r7, #8]
      break;
 8002540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002542:	68bb      	ldr	r3, [r7, #8]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a9b      	lsrs	r3, r3, #10
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	080055ec 	.word	0x080055ec

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a0:	f7ff ffdc 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0b5b      	lsrs	r3, r3, #13
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	080055ec 	.word	0x080055ec

080025c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	220f      	movs	r2, #15
 80025d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_GetClockConfig+0x5c>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCC_GetClockConfig+0x5c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_GetClockConfig+0x5c>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_GetClockConfig+0x5c>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_RCC_GetClockConfig+0x60>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	601a      	str	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40023c00 	.word	0x40023c00

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e041      	b.n	80026be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f839 	bl	80026c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 f9ca 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d001      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e044      	b.n	800277e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_TIM_Base_Start_IT+0xb0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x6c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d013      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x6c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_TIM_Base_Start_IT+0xb4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x6c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_TIM_Base_Start_IT+0xb8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x6c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_TIM_Base_Start_IT+0xbc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x6c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_TIM_Base_Start_IT+0xc0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d010      	beq.n	800277c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276a:	e007      	b.n	800277c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40010000 	.word	0x40010000
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800
 8002798:	40000c00 	.word	0x40000c00
 800279c:	40014000 	.word	0x40014000

080027a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0202 	mvn.w	r2, #2
 80027cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8ee 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8e0 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8f1 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0204 	mvn.w	r2, #4
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8c4 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8b6 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8c7 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0208 	mvn.w	r2, #8
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f89a 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f88c 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f89d 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d122      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d11b      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0210 	mvn.w	r2, #16
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2208      	movs	r2, #8
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f870 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f862 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f873 	bl	80029d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0201 	mvn.w	r2, #1
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f928 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	d10e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d107      	bne.n	8002950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8e2 	bl	8002b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d10e      	bne.n	800297c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f838 	bl	80029ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b20      	cmp	r3, #32
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b20      	cmp	r3, #32
 8002996:	d107      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0220 	mvn.w	r2, #32
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8ac 	bl	8002b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00f      	beq.n	8002a38 <TIM_Base_SetConfig+0x38>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d00b      	beq.n	8002a38 <TIM_Base_SetConfig+0x38>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a31      	ldr	r2, [pc, #196]	; (8002ae8 <TIM_Base_SetConfig+0xe8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <TIM_Base_SetConfig+0x38>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a30      	ldr	r2, [pc, #192]	; (8002aec <TIM_Base_SetConfig+0xec>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0x38>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a2f      	ldr	r2, [pc, #188]	; (8002af0 <TIM_Base_SetConfig+0xf0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01b      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d017      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <TIM_Base_SetConfig+0xe8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a21      	ldr	r2, [pc, #132]	; (8002aec <TIM_Base_SetConfig+0xec>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00f      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <TIM_Base_SetConfig+0xf0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00b      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <TIM_Base_SetConfig+0xf4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <TIM_Base_SetConfig+0xf8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d003      	beq.n	8002a8a <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <TIM_Base_SetConfig+0xfc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d103      	bne.n	8002ad0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800
 8002af0:	40000c00 	.word	0x40000c00
 8002af4:	40014000 	.word	0x40014000
 8002af8:	40014400 	.word	0x40014400
 8002afc:	40014800 	.word	0x40014800

08002b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e03f      	b.n	8002bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe f898 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fbe3 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d130      	bne.n	8002c3e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_UART_Transmit_IT+0x26>
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e029      	b.n	8002c40 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Transmit_IT+0x38>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e022      	b.n	8002c40 <HAL_UART_Transmit_IT+0x7e>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2221      	movs	r2, #33	; 0x21
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d11d      	bne.n	8002ca2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_UART_Receive_IT+0x26>
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e016      	b.n	8002ca4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Receive_IT+0x38>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e00f      	b.n	8002ca4 <HAL_UART_Receive_IT+0x58>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f9d3 	bl	8003044 <UART_Start_Receive_IT>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	e000      	b.n	8002ca4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_UART_IRQHandler+0x52>
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa87 	bl	800320a <UART_Receive_IT>
      return;
 8002cfc:	e17c      	b.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80b1 	beq.w	8002e68 <HAL_UART_IRQHandler+0x1bc>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_UART_IRQHandler+0x70>
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a6 	beq.w	8002e68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_UART_IRQHandler+0x90>
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_UART_IRQHandler+0xb0>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_UART_IRQHandler+0xd0>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0204 	orr.w	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00f      	beq.n	8002da6 <HAL_UART_IRQHandler+0xfa>
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <HAL_UART_IRQHandler+0xee>
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0208 	orr.w	r2, r3, #8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 811f 	beq.w	8002fee <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_UART_IRQHandler+0x11e>
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa20 	bl	800320a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <HAL_UART_IRQHandler+0x146>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d031      	beq.n	8002e56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f960 	bl	80030b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d123      	bne.n	8002e4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d013      	beq.n	8002e46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	4a77      	ldr	r2, [pc, #476]	; (8003000 <HAL_UART_IRQHandler+0x354>)
 8002e24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fd7c 	bl	8001928 <HAL_DMA_Abort_IT>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	e00e      	b.n	8002e64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8e6 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	e00a      	b.n	8002e64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8e2 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	e006      	b.n	8002e64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8de 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e62:	e0c4      	b.n	8002fee <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	bf00      	nop
    return;
 8002e66:	e0c2      	b.n	8002fee <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 80a2 	bne.w	8002fb6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 809c 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8096 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d14f      	bne.n	8002f4e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002eb8:	8a3b      	ldrh	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8099 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ec4:	8a3a      	ldrh	r2, [r7, #16]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f080 8093 	bcs.w	8002ff2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8a3a      	ldrh	r2, [r7, #16]
 8002ed0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002edc:	d02b      	beq.n	8002f36 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eec:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fc89 	bl	8001848 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f870 	bl	800302c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f4c:	e051      	b.n	8002ff2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d047      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002f66:	8a7b      	ldrh	r3, [r7, #18]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d044      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f7a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0210 	bic.w	r2, r2, #16
 8002fa8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002faa:	8a7b      	ldrh	r3, [r7, #18]
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f83c 	bl	800302c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fb4:	e01f      	b.n	8002ff6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x326>
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8b5 	bl	800313a <UART_Transmit_IT>
    return;
 8002fd0:	e012      	b.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00d      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8f7 	bl	80031da <UART_EndTransmit_IT>
    return;
 8002fec:	e004      	b.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
    return;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
      return;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <HAL_UART_IRQHandler+0x34c>
      return;
 8002ff6:	bf00      	nop
  }
}
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	08003113 	.word	0x08003113

08003004 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2222      	movs	r2, #34	; 0x22
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003088:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0220 	orr.w	r2, r2, #32
 80030a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d107      	bne.n	80030f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff ff73 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b21      	cmp	r3, #33	; 0x21
 800314c:	d13e      	bne.n	80031cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	d114      	bne.n	8003182 <UART_Transmit_IT+0x48>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d110      	bne.n	8003182 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	621a      	str	r2, [r3, #32]
 8003180:	e008      	b.n	8003194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	1c59      	adds	r1, r3, #1
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6211      	str	r1, [r2, #32]
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4619      	mov	r1, r3
 80031a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10f      	bne.n	80031c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ff02 	bl	8003004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b22      	cmp	r3, #34	; 0x22
 800321c:	f040 8087 	bne.w	800332e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d117      	bne.n	800325a <UART_Receive_IT+0x50>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003248:	b29a      	uxth	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
 8003258:	e026      	b.n	80032a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d007      	beq.n	800327e <UART_Receive_IT+0x74>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <UART_Receive_IT+0x82>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e008      	b.n	800329e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4619      	mov	r1, r3
 80032b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d136      	bne.n	800332a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0220 	bic.w	r2, r2, #32
 80032ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10e      	bne.n	800331a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0210 	bic.w	r2, r2, #16
 800330a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff fe8a 	bl	800302c <HAL_UARTEx_RxEventCallback>
 8003318:	e002      	b.n	8003320 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd f98e 	bl	800063c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e002      	b.n	8003330 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	b09f      	sub	sp, #124	; 0x7c
 800333e:	af00      	add	r7, sp, #0
 8003340:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	68d9      	ldr	r1, [r3, #12]
 8003350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	ea40 0301 	orr.w	r3, r0, r1
 8003358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	431a      	orrs	r2, r3
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	431a      	orrs	r2, r3
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4313      	orrs	r3, r2
 8003370:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800337c:	f021 010c 	bic.w	r1, r1, #12
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003386:	430b      	orrs	r3, r1
 8003388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	6999      	ldr	r1, [r3, #24]
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	ea40 0301 	orr.w	r3, r0, r1
 80033a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4bc5      	ldr	r3, [pc, #788]	; (80036bc <UART_SetConfig+0x384>)
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d004      	beq.n	80033b6 <UART_SetConfig+0x7e>
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4bc3      	ldr	r3, [pc, #780]	; (80036c0 <UART_SetConfig+0x388>)
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d103      	bne.n	80033be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033b6:	f7ff f8f1 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 80033ba:	6778      	str	r0, [r7, #116]	; 0x74
 80033bc:	e002      	b.n	80033c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033be:	f7ff f8d9 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 80033c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033cc:	f040 80b6 	bne.w	800353c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d2:	461c      	mov	r4, r3
 80033d4:	f04f 0500 	mov.w	r5, #0
 80033d8:	4622      	mov	r2, r4
 80033da:	462b      	mov	r3, r5
 80033dc:	1891      	adds	r1, r2, r2
 80033de:	6439      	str	r1, [r7, #64]	; 0x40
 80033e0:	415b      	adcs	r3, r3
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033e8:	1912      	adds	r2, r2, r4
 80033ea:	eb45 0303 	adc.w	r3, r5, r3
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033fc:	00d0      	lsls	r0, r2, #3
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	1911      	adds	r1, r2, r4
 8003404:	6639      	str	r1, [r7, #96]	; 0x60
 8003406:	416b      	adcs	r3, r5
 8003408:	667b      	str	r3, [r7, #100]	; 0x64
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	1891      	adds	r1, r2, r2
 8003416:	63b9      	str	r1, [r7, #56]	; 0x38
 8003418:	415b      	adcs	r3, r3
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003424:	f7fc fedc 	bl	80001e0 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4ba5      	ldr	r3, [pc, #660]	; (80036c4 <UART_SetConfig+0x38c>)
 800342e:	fba3 2302 	umull	r2, r3, r3, r2
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	011e      	lsls	r6, r3, #4
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	461c      	mov	r4, r3
 800343a:	f04f 0500 	mov.w	r5, #0
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	1891      	adds	r1, r2, r2
 8003444:	6339      	str	r1, [r7, #48]	; 0x30
 8003446:	415b      	adcs	r3, r3
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
 800344a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800344e:	1912      	adds	r2, r2, r4
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	00d9      	lsls	r1, r3, #3
 800345e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003462:	00d0      	lsls	r0, r2, #3
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	1911      	adds	r1, r2, r4
 800346a:	65b9      	str	r1, [r7, #88]	; 0x58
 800346c:	416b      	adcs	r3, r5
 800346e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	1891      	adds	r1, r2, r2
 800347c:	62b9      	str	r1, [r7, #40]	; 0x28
 800347e:	415b      	adcs	r3, r3
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003486:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800348a:	f7fc fea9 	bl	80001e0 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4b8c      	ldr	r3, [pc, #560]	; (80036c4 <UART_SetConfig+0x38c>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <UART_SetConfig+0x38c>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b4:	441e      	add	r6, r3
 80034b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b8:	4618      	mov	r0, r3
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	1894      	adds	r4, r2, r2
 80034c4:	623c      	str	r4, [r7, #32]
 80034c6:	415b      	adcs	r3, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ce:	1812      	adds	r2, r2, r0
 80034d0:	eb41 0303 	adc.w	r3, r1, r3
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	f04f 0500 	mov.w	r5, #0
 80034dc:	00dd      	lsls	r5, r3, #3
 80034de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034e2:	00d4      	lsls	r4, r2, #3
 80034e4:	4622      	mov	r2, r4
 80034e6:	462b      	mov	r3, r5
 80034e8:	1814      	adds	r4, r2, r0
 80034ea:	653c      	str	r4, [r7, #80]	; 0x50
 80034ec:	414b      	adcs	r3, r1
 80034ee:	657b      	str	r3, [r7, #84]	; 0x54
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	61b9      	str	r1, [r7, #24]
 80034fe:	415b      	adcs	r3, r3
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800350a:	f7fc fe69 	bl	80001e0 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <UART_SetConfig+0x38c>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <UART_SetConfig+0x38c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4432      	add	r2, r6
 8003538:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353a:	e0b9      	b.n	80036b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	461c      	mov	r4, r3
 8003540:	f04f 0500 	mov.w	r5, #0
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	1891      	adds	r1, r2, r2
 800354a:	6139      	str	r1, [r7, #16]
 800354c:	415b      	adcs	r3, r3
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003554:	1912      	adds	r2, r2, r4
 8003556:	eb45 0303 	adc.w	r3, r5, r3
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	eb12 0804 	adds.w	r8, r2, r4
 8003572:	eb43 0905 	adc.w	r9, r3, r5
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	008b      	lsls	r3, r1, #2
 800358a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800358e:	0082      	lsls	r2, r0, #2
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	f7fc fe24 	bl	80001e0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <UART_SetConfig+0x38c>)
 800359e:	fba3 2302 	umull	r2, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	011e      	lsls	r6, r3, #4
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	4618      	mov	r0, r3
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	1894      	adds	r4, r2, r2
 80035b4:	60bc      	str	r4, [r7, #8]
 80035b6:	415b      	adcs	r3, r3
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035be:	1812      	adds	r2, r2, r0
 80035c0:	eb41 0303 	adc.w	r3, r1, r3
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	f04f 0500 	mov.w	r5, #0
 80035cc:	00dd      	lsls	r5, r3, #3
 80035ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035d2:	00d4      	lsls	r4, r2, #3
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
 80035d8:	1814      	adds	r4, r2, r0
 80035da:	64bc      	str	r4, [r7, #72]	; 0x48
 80035dc:	414b      	adcs	r3, r1
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	008b      	lsls	r3, r1, #2
 80035f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035f8:	0082      	lsls	r2, r0, #2
 80035fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035fe:	f7fc fdef 	bl	80001e0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <UART_SetConfig+0x38c>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2164      	movs	r1, #100	; 0x64
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <UART_SetConfig+0x38c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	441e      	add	r6, r3
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	4618      	mov	r0, r3
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	1894      	adds	r4, r2, r2
 8003636:	603c      	str	r4, [r7, #0]
 8003638:	415b      	adcs	r3, r3
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003640:	1812      	adds	r2, r2, r0
 8003642:	eb41 0303 	adc.w	r3, r1, r3
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	f04f 0500 	mov.w	r5, #0
 800364e:	00dd      	lsls	r5, r3, #3
 8003650:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003654:	00d4      	lsls	r4, r2, #3
 8003656:	4622      	mov	r2, r4
 8003658:	462b      	mov	r3, r5
 800365a:	eb12 0a00 	adds.w	sl, r2, r0
 800365e:	eb43 0b01 	adc.w	fp, r3, r1
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	008b      	lsls	r3, r1, #2
 8003676:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800367a:	0082      	lsls	r2, r0, #2
 800367c:	4650      	mov	r0, sl
 800367e:	4659      	mov	r1, fp
 8003680:	f7fc fdae 	bl	80001e0 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <UART_SetConfig+0x38c>)
 800368a:	fba3 1302 	umull	r1, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2164      	movs	r1, #100	; 0x64
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <UART_SetConfig+0x38c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4432      	add	r2, r6
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	377c      	adds	r7, #124	; 0x7c
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40011400 	.word	0x40011400
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f103 0208 	add.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295
 80036e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f103 0208 	add.w	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0208 	add.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d103      	bne.n	800378a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e00c      	b.n	80037a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3308      	adds	r3, #8
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e002      	b.n	8003798 <vListInsert+0x2e>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d2f6      	bcs.n	8003792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6852      	ldr	r2, [r2, #4]
 80037fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d103      	bne.n	8003810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800385a:	f001 fb93 	bl	8004f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	441a      	add	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	3b01      	subs	r3, #1
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	22ff      	movs	r2, #255	; 0xff
 80038a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d114      	bne.n	80038da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01a      	beq.n	80038ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3310      	adds	r3, #16
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 ff71 	bl	80047a4 <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d012      	beq.n	80038ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <xQueueGenericReset+0xcc>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	e009      	b.n	80038ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3310      	adds	r3, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fef2 	bl	80036c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3324      	adds	r3, #36	; 0x24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff feed 	bl	80036c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038ee:	f001 fb79 	bl	8004fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038f2:	2301      	movs	r3, #1
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	613b      	str	r3, [r7, #16]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3348      	adds	r3, #72	; 0x48
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fc05 	bl	8005148 <pvPortMalloc>
 800393e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d011      	beq.n	800396a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3348      	adds	r3, #72	; 0x48
 800394e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003958:	79fa      	ldrb	r2, [r7, #7]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f805 	bl	8003974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800396a:	69bb      	ldr	r3, [r7, #24]
	}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039a2:	2101      	movs	r1, #1
 80039a4:	69b8      	ldr	r0, [r7, #24]
 80039a6:	f7ff ff43 	bl	8003830 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08e      	sub	sp, #56	; 0x38
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039c2:	2300      	movs	r3, #0
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSend+0x32>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <xQueueGenericSend+0x40>
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <xQueueGenericSend+0x44>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <xQueueGenericSend+0x46>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <xQueueGenericSend+0x60>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSend+0x6e>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <xQueueGenericSend+0x72>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericSend+0x74>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	623b      	str	r3, [r7, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a42:	f001 f86b 	bl	8004b1c <xTaskGetSchedulerState>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <xQueueGenericSend+0x9e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <xQueueGenericSend+0xa2>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <xQueueGenericSend+0xa4>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	61fb      	str	r3, [r7, #28]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a72:	f001 fa87 	bl	8004f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <xQueueGenericSend+0xd4>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d129      	bne.n	8003adc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 f96f 	bl	8003d70 <prvCopyDataToQueue>
 8003a92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	3324      	adds	r3, #36	; 0x24
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe7f 	bl	80047a4 <xTaskRemoveFromEventList>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d013      	beq.n	8003ad4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aac:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <xQueueGenericSend+0x1f8>)
 8003aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	e00a      	b.n	8003ad4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <xQueueGenericSend+0x1f8>)
 8003ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ad4:	f001 fa86 	bl	8004fe4 <vPortExitCritical>
				return pdPASS;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e063      	b.n	8003ba4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ae2:	f001 fa7f 	bl	8004fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e05c      	b.n	8003ba4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 feb7 	bl	8004868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003afe:	f001 fa71 	bl	8004fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b02:	f000 fc6d 	bl	80043e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b06:	f001 fa3d 	bl	8004f84 <vPortEnterCritical>
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d103      	bne.n	8003b20 <xQueueGenericSend+0x16c>
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d103      	bne.n	8003b36 <xQueueGenericSend+0x182>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b36:	f001 fa55 	bl	8004fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b3a:	1d3a      	adds	r2, r7, #4
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fea6 	bl	8004894 <xTaskCheckForTimeOut>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d124      	bne.n	8003b98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b50:	f000 fa06 	bl	8003f60 <prvIsQueueFull>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d018      	beq.n	8003b8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	3310      	adds	r3, #16
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fdfa 	bl	800475c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b6a:	f000 f991 	bl	8003e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b6e:	f000 fc45 	bl	80043fc <xTaskResumeAll>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f47f af7c 	bne.w	8003a72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <xQueueGenericSend+0x1f8>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	e772      	b.n	8003a72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8e:	f000 f97f 	bl	8003e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b92:	f000 fc33 	bl	80043fc <xTaskResumeAll>
 8003b96:	e76c      	b.n	8003a72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9a:	f000 f979 	bl	8003e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b9e:	f000 fc2d 	bl	80043fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ba2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3738      	adds	r7, #56	; 0x38
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <xQueueReceive+0x30>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	623b      	str	r3, [r7, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <xQueueReceive+0x3e>
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <xQueueReceive+0x42>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <xQueueReceive+0x44>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xQueueReceive+0x5e>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	61fb      	str	r3, [r7, #28]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c0e:	f000 ff85 	bl	8004b1c <xTaskGetSchedulerState>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <xQueueReceive+0x6e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <xQueueReceive+0x72>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueReceive+0x74>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueReceive+0x8e>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	61bb      	str	r3, [r7, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3e:	f001 f9a1 	bl	8004f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01f      	beq.n	8003c8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c52:	f000 f8f7 	bl	8003e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00f      	beq.n	8003c86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	3310      	adds	r3, #16
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fd9a 	bl	80047a4 <xTaskRemoveFromEventList>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c76:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <xQueueReceive+0x1bc>)
 8003c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c86:	f001 f9ad 	bl	8004fe4 <vPortExitCritical>
				return pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e069      	b.n	8003d62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c94:	f001 f9a6 	bl	8004fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e062      	b.n	8003d62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fdde 	bl	8004868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cb0:	f001 f998 	bl	8004fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb4:	f000 fb94 	bl	80043e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb8:	f001 f964 	bl	8004f84 <vPortEnterCritical>
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d103      	bne.n	8003cd2 <xQueueReceive+0x122>
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0x138>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce8:	f001 f97c 	bl	8004fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cec:	1d3a      	adds	r2, r7, #4
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fdcd 	bl	8004894 <xTaskCheckForTimeOut>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d123      	bne.n	8003d48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d02:	f000 f917 	bl	8003f34 <prvIsQueueEmpty>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fd21 	bl	800475c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d1c:	f000 f8b8 	bl	8003e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d20:	f000 fb6c 	bl	80043fc <xTaskResumeAll>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d189      	bne.n	8003c3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <xQueueReceive+0x1bc>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	e780      	b.n	8003c3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3e:	f000 f8a7 	bl	8003e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d42:	f000 fb5b 	bl	80043fc <xTaskResumeAll>
 8003d46:	e77a      	b.n	8003c3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4a:	f000 f8a1 	bl	8003e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4e:	f000 fb55 	bl	80043fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d54:	f000 f8ee 	bl	8003f34 <prvIsQueueEmpty>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f43f af6f 	beq.w	8003c3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3730      	adds	r7, #48	; 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d14d      	bne.n	8003e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fedc 	bl	8004b58 <xTaskPriorityDisinherit>
 8003da0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e043      	b.n	8003e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d119      	bne.n	8003de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6858      	ldr	r0, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	f001 fbd2 	bl	8005564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	441a      	add	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d32b      	bcc.n	8003e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	e026      	b.n	8003e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68d8      	ldr	r0, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	461a      	mov	r2, r3
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	f001 fbb8 	bl	8005564 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	441a      	add	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d207      	bcs.n	8003e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	425b      	negs	r3, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d105      	bne.n	8003e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d018      	beq.n	8003e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	441a      	add	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d303      	bcc.n	8003e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68d9      	ldr	r1, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	461a      	mov	r2, r3
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f001 fb6e 	bl	8005564 <memcpy>
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e98:	f001 f874 	bl	8004f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea4:	e011      	b.n	8003eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d012      	beq.n	8003ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	; 0x24
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fc76 	bl	80047a4 <xTaskRemoveFromEventList>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ebe:	f000 fd4b 	bl	8004958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dce9      	bgt.n	8003ea6 <prvUnlockQueue+0x16>
 8003ed2:	e000      	b.n	8003ed6 <prvUnlockQueue+0x46>
					break;
 8003ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ede:	f001 f881 	bl	8004fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ee2:	f001 f84f 	bl	8004f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eee:	e011      	b.n	8003f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3310      	adds	r3, #16
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fc51 	bl	80047a4 <xTaskRemoveFromEventList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f08:	f000 fd26 	bl	8004958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dce9      	bgt.n	8003ef0 <prvUnlockQueue+0x60>
 8003f1c:	e000      	b.n	8003f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f28:	f001 f85c 	bl	8004fe4 <vPortExitCritical>
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f3c:	f001 f822 	bl	8004f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e001      	b.n	8003f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f52:	f001 f847 	bl	8004fe4 <vPortExitCritical>

	return xReturn;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f68:	f001 f80c 	bl	8004f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d102      	bne.n	8003f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e001      	b.n	8003f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f82:	f001 f82f 	bl	8004fe4 <vPortExitCritical>

	return xReturn;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	; 0x38
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	61fb      	str	r3, [r7, #28]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fd6:	2354      	movs	r3, #84	; 0x54
 8003fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b54      	cmp	r3, #84	; 0x54
 8003fde:	d00a      	beq.n	8003ff6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	61bb      	str	r3, [r7, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ff6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01e      	beq.n	800403c <xTaskCreateStatic+0xac>
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004016:	2300      	movs	r3, #0
 8004018:	9303      	str	r3, [sp, #12]
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9302      	str	r3, [sp, #8]
 800401e:	f107 0314 	add.w	r3, r7, #20
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f850 	bl	80040d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004036:	f000 f8d5 	bl	80041e4 <prvAddNewTaskToReadyList>
 800403a:	e001      	b.n	8004040 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004040:	697b      	ldr	r3, [r7, #20]
	}
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	; 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08c      	sub	sp, #48	; 0x30
 800404e:	af04      	add	r7, sp, #16
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f872 	bl	8005148 <pvPortMalloc>
 8004064:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800406c:	2054      	movs	r0, #84	; 0x54
 800406e:	f001 f86b 	bl	8005148 <pvPortMalloc>
 8004072:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
 8004080:	e005      	b.n	800408e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f001 f92c 	bl	80052e0 <vPortFree>
 8004088:	e001      	b.n	800408e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d017      	beq.n	80040c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	2300      	movs	r3, #0
 80040a0:	9303      	str	r3, [sp, #12]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	9302      	str	r3, [sp, #8]
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f80e 	bl	80040d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b8:	69f8      	ldr	r0, [r7, #28]
 80040ba:	f000 f893 	bl	80041e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040be:	2301      	movs	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e002      	b.n	80040ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
 80040c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040ca:	69bb      	ldr	r3, [r7, #24]
	}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040ec:	3b01      	subs	r3, #1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f023 0307 	bic.w	r3, r3, #7
 80040fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	617b      	str	r3, [r7, #20]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01f      	beq.n	8004162 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e012      	b.n	800414e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	7819      	ldrb	r1, [r3, #0]
 8004130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	3334      	adds	r3, #52	; 0x34
 8004138:	460a      	mov	r2, r1
 800413a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3301      	adds	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b0f      	cmp	r3, #15
 8004152:	d9e9      	bls.n	8004128 <prvInitialiseNewTask+0x54>
 8004154:	e000      	b.n	8004158 <prvInitialiseNewTask+0x84>
			{
				break;
 8004156:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004160:	e003      	b.n	800416a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	2b06      	cmp	r3, #6
 800416e:	d901      	bls.n	8004174 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004170:	2306      	movs	r3, #6
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	2200      	movs	r2, #0
 8004184:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	3304      	adds	r3, #4
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fabc 	bl	8003708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	3318      	adds	r3, #24
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fab7 	bl	8003708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	f1c3 0207 	rsb	r2, r3, #7
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	69b8      	ldr	r0, [r7, #24]
 80041c4:	f000 fdb4 	bl	8004d30 <pxPortInitialiseStack>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041da:	bf00      	nop
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041ec:	f000 feca 	bl	8004f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a29      	ldr	r2, [pc, #164]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 80041f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004202:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d110      	bne.n	8004232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004210:	f000 fbc6 	bl	80049a0 <prvInitialiseTaskLists>
 8004214:	e00d      	b.n	8004232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <prvAddNewTaskToReadyList+0xc0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	429a      	cmp	r2, r3
 800422a:	d802      	bhi.n	8004232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <prvAddNewTaskToReadyList+0xc4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <prvAddNewTaskToReadyList+0xc4>)
 800423a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <prvAddNewTaskToReadyList+0xc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <prvAddNewTaskToReadyList+0xc8>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <prvAddNewTaskToReadyList+0xcc>)
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7ff fa5c 	bl	8003722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800426a:	f000 febb 	bl	8004fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <prvAddNewTaskToReadyList+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d207      	bcs.n	8004294 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <prvAddNewTaskToReadyList+0xd0>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000380 	.word	0x20000380
 80042a0:	20000280 	.word	0x20000280
 80042a4:	2000038c 	.word	0x2000038c
 80042a8:	2000039c 	.word	0x2000039c
 80042ac:	20000388 	.word	0x20000388
 80042b0:	20000284 	.word	0x20000284
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <vTaskDelay+0x60>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <vTaskDelay+0x30>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60bb      	str	r3, [r7, #8]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042e8:	f000 f87a 	bl	80043e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ec:	2100      	movs	r1, #0
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fcb8 	bl	8004c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042f4:	f000 f882 	bl	80043fc <xTaskResumeAll>
 80042f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <vTaskDelay+0x64>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200003a8 	.word	0x200003a8
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800432e:	463a      	mov	r2, r7
 8004330:	1d39      	adds	r1, r7, #4
 8004332:	f107 0308 	add.w	r3, r7, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f8ce 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	9202      	str	r2, [sp, #8]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	460a      	mov	r2, r1
 800434e:	491e      	ldr	r1, [pc, #120]	; (80043c8 <vTaskStartScheduler+0xa8>)
 8004350:	481e      	ldr	r0, [pc, #120]	; (80043cc <vTaskStartScheduler+0xac>)
 8004352:	f7ff fe1d 	bl	8003f90 <xTaskCreateStatic>
 8004356:	4603      	mov	r3, r0
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <vTaskStartScheduler+0xb0>)
 800435a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <vTaskStartScheduler+0xb0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004364:	2301      	movs	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e001      	b.n	800436e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d116      	bne.n	80043a2 <vTaskStartScheduler+0x82>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	613b      	str	r3, [r7, #16]
}
 8004386:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <vTaskStartScheduler+0xb4>)
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <vTaskStartScheduler+0xb8>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <vTaskStartScheduler+0xbc>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800439c:	f000 fd50 	bl	8004e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043a0:	e00e      	b.n	80043c0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d10a      	bne.n	80043c0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <vTaskStartScheduler+0x9e>
}
 80043c0:	bf00      	nop
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	080055d4 	.word	0x080055d4
 80043cc:	08004971 	.word	0x08004971
 80043d0:	200003a4 	.word	0x200003a4
 80043d4:	200003a0 	.word	0x200003a0
 80043d8:	2000038c 	.word	0x2000038c
 80043dc:	20000384 	.word	0x20000384

080043e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <vTaskSuspendAll+0x18>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <vTaskSuspendAll+0x18>)
 80043ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	200003a8 	.word	0x200003a8

080043fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <xTaskResumeAll+0x114>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <xTaskResumeAll+0x2c>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	603b      	str	r3, [r7, #0]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004428:	f000 fdac 	bl	8004f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800442c:	4b38      	ldr	r3, [pc, #224]	; (8004510 <xTaskResumeAll+0x114>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3b01      	subs	r3, #1
 8004432:	4a37      	ldr	r2, [pc, #220]	; (8004510 <xTaskResumeAll+0x114>)
 8004434:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <xTaskResumeAll+0x114>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d161      	bne.n	8004502 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800443e:	4b35      	ldr	r3, [pc, #212]	; (8004514 <xTaskResumeAll+0x118>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d05d      	beq.n	8004502 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004446:	e02e      	b.n	80044a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004448:	4b33      	ldr	r3, [pc, #204]	; (8004518 <xTaskResumeAll+0x11c>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3318      	adds	r3, #24
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff f9c1 	bl	80037dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3304      	adds	r3, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f9bc 	bl	80037dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <xTaskResumeAll+0x120>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	4a2a      	ldr	r2, [pc, #168]	; (800451c <xTaskResumeAll+0x120>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a27      	ldr	r2, [pc, #156]	; (8004520 <xTaskResumeAll+0x124>)
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7ff f948 	bl	8003722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <xTaskResumeAll+0x128>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <xTaskResumeAll+0x12c>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <xTaskResumeAll+0x11c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1cc      	bne.n	8004448 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044b4:	f000 fb12 	bl	8004adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044b8:	4b1c      	ldr	r3, [pc, #112]	; (800452c <xTaskResumeAll+0x130>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d010      	beq.n	80044e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044c4:	f000 f836 	bl	8004534 <xTaskIncrementTick>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <xTaskResumeAll+0x12c>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f1      	bne.n	80044c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80044e0:	4b12      	ldr	r3, [pc, #72]	; (800452c <xTaskResumeAll+0x130>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <xTaskResumeAll+0x12c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <xTaskResumeAll+0x134>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004502:	f000 fd6f 	bl	8004fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8004506:	68bb      	ldr	r3, [r7, #8]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200003a8 	.word	0x200003a8
 8004514:	20000380 	.word	0x20000380
 8004518:	20000340 	.word	0x20000340
 800451c:	20000388 	.word	0x20000388
 8004520:	20000284 	.word	0x20000284
 8004524:	20000280 	.word	0x20000280
 8004528:	20000394 	.word	0x20000394
 800452c:	20000390 	.word	0x20000390
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453e:	4b4e      	ldr	r3, [pc, #312]	; (8004678 <xTaskIncrementTick+0x144>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 808e 	bne.w	8004664 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004548:	4b4c      	ldr	r3, [pc, #304]	; (800467c <xTaskIncrementTick+0x148>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <xTaskIncrementTick+0x148>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d120      	bne.n	800459e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800455c:	4b48      	ldr	r3, [pc, #288]	; (8004680 <xTaskIncrementTick+0x14c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <xTaskIncrementTick+0x48>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	603b      	str	r3, [r7, #0]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <xTaskIncrementTick+0x46>
 800457c:	4b40      	ldr	r3, [pc, #256]	; (8004680 <xTaskIncrementTick+0x14c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <xTaskIncrementTick+0x150>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3e      	ldr	r2, [pc, #248]	; (8004680 <xTaskIncrementTick+0x14c>)
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4a3e      	ldr	r2, [pc, #248]	; (8004684 <xTaskIncrementTick+0x150>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <xTaskIncrementTick+0x154>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <xTaskIncrementTick+0x154>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	f000 fa9f 	bl	8004adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800459e:	4b3b      	ldr	r3, [pc, #236]	; (800468c <xTaskIncrementTick+0x158>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d348      	bcc.n	800463a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a8:	4b35      	ldr	r3, [pc, #212]	; (8004680 <xTaskIncrementTick+0x14c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <xTaskIncrementTick+0x158>)
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	601a      	str	r2, [r3, #0]
					break;
 80045ba:	e03e      	b.n	800463a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <xTaskIncrementTick+0x14c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d203      	bcs.n	80045dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045d4:	4a2d      	ldr	r2, [pc, #180]	; (800468c <xTaskIncrementTick+0x158>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045da:	e02e      	b.n	800463a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f8fb 	bl	80037dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f8f2 	bl	80037dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <xTaskIncrementTick+0x15c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <xTaskIncrementTick+0x15c>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <xTaskIncrementTick+0x160>)
 8004618:	441a      	add	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7ff f87e 	bl	8003722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <xTaskIncrementTick+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d3b9      	bcc.n	80045a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004638:	e7b6      	b.n	80045a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <xTaskIncrementTick+0x164>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4914      	ldr	r1, [pc, #80]	; (8004694 <xTaskIncrementTick+0x160>)
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d901      	bls.n	8004656 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <xTaskIncrementTick+0x168>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800465e:	2301      	movs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e004      	b.n	800466e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <xTaskIncrementTick+0x16c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <xTaskIncrementTick+0x16c>)
 800466c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200003a8 	.word	0x200003a8
 800467c:	20000384 	.word	0x20000384
 8004680:	20000338 	.word	0x20000338
 8004684:	2000033c 	.word	0x2000033c
 8004688:	20000398 	.word	0x20000398
 800468c:	200003a0 	.word	0x200003a0
 8004690:	20000388 	.word	0x20000388
 8004694:	20000284 	.word	0x20000284
 8004698:	20000280 	.word	0x20000280
 800469c:	20000394 	.word	0x20000394
 80046a0:	20000390 	.word	0x20000390

080046a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <vTaskSwitchContext+0xa4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <vTaskSwitchContext+0xa8>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046b8:	e03f      	b.n	800473a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <vTaskSwitchContext+0xa8>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <vTaskSwitchContext+0xac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046ce:	7afb      	ldrb	r3, [r7, #11]
 80046d0:	f1c3 031f 	rsb	r3, r3, #31
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	491f      	ldr	r1, [pc, #124]	; (8004754 <vTaskSwitchContext+0xb0>)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <vTaskSwitchContext+0x5a>
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4a12      	ldr	r2, [pc, #72]	; (8004754 <vTaskSwitchContext+0xb0>)
 800470c:	4413      	add	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3308      	adds	r3, #8
 8004722:	429a      	cmp	r2, r3
 8004724:	d104      	bne.n	8004730 <vTaskSwitchContext+0x8c>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4a08      	ldr	r2, [pc, #32]	; (8004758 <vTaskSwitchContext+0xb4>)
 8004738:	6013      	str	r3, [r2, #0]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	200003a8 	.word	0x200003a8
 800474c:	20000394 	.word	0x20000394
 8004750:	20000388 	.word	0x20000388
 8004754:	20000284 	.word	0x20000284
 8004758:	20000280 	.word	0x20000280

0800475c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <vTaskPlaceOnEventList+0x44>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3318      	adds	r3, #24
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe ffed 	bl	800376a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004790:	2101      	movs	r1, #1
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	f000 fa66 	bl	8004c64 <prvAddCurrentTaskToDelayedList>
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000280 	.word	0x20000280

080047a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60fb      	str	r3, [r7, #12]
}
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff f801 	bl	80037dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <xTaskRemoveFromEventList+0xac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11c      	bne.n	800481c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fff8 	bl	80037dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	4b17      	ldr	r3, [pc, #92]	; (8004854 <xTaskRemoveFromEventList+0xb0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	4a16      	ldr	r2, [pc, #88]	; (8004854 <xTaskRemoveFromEventList+0xb0>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <xTaskRemoveFromEventList+0xb4>)
 800480c:	441a      	add	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe ff84 	bl	8003722 <vListInsertEnd>
 800481a:	e005      	b.n	8004828 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	3318      	adds	r3, #24
 8004820:	4619      	mov	r1, r3
 8004822:	480e      	ldr	r0, [pc, #56]	; (800485c <xTaskRemoveFromEventList+0xb8>)
 8004824:	f7fe ff7d 	bl	8003722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <xTaskRemoveFromEventList+0xbc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	429a      	cmp	r2, r3
 8004834:	d905      	bls.n	8004842 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004836:	2301      	movs	r3, #1
 8004838:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <xTaskRemoveFromEventList+0xc0>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e001      	b.n	8004846 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004846:	697b      	ldr	r3, [r7, #20]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	200003a8 	.word	0x200003a8
 8004854:	20000388 	.word	0x20000388
 8004858:	20000284 	.word	0x20000284
 800485c:	20000340 	.word	0x20000340
 8004860:	20000280 	.word	0x20000280
 8004864:	20000394 	.word	0x20000394

08004868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <vTaskInternalSetTimeOutState+0x24>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <vTaskInternalSetTimeOutState+0x28>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000398 	.word	0x20000398
 8004890:	20000384 	.word	0x20000384

08004894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	613b      	str	r3, [r7, #16]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048d6:	f000 fb55 	bl	8004f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <xTaskCheckForTimeOut+0xbc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e023      	b.n	8004942 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <xTaskCheckForTimeOut+0xc0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d007      	beq.n	8004916 <xTaskCheckForTimeOut+0x82>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e015      	b.n	8004942 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	429a      	cmp	r2, r3
 800491e:	d20b      	bcs.n	8004938 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff9b 	bl	8004868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e004      	b.n	8004942 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004942:	f000 fb4f 	bl	8004fe4 <vPortExitCritical>

	return xReturn;
 8004946:	69fb      	ldr	r3, [r7, #28]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000384 	.word	0x20000384
 8004954:	20000398 	.word	0x20000398

08004958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <vTaskMissedYield+0x14>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000394 	.word	0x20000394

08004970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004978:	f000 f852 	bl	8004a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <prvIdleTask+0x28>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d9f9      	bls.n	8004978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <prvIdleTask+0x2c>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004994:	e7f0      	b.n	8004978 <prvIdleTask+0x8>
 8004996:	bf00      	nop
 8004998:	20000284 	.word	0x20000284
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	e00c      	b.n	80049c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <prvInitialiseTaskLists+0x60>)
 80049b8:	4413      	add	r3, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fe84 	bl	80036c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3301      	adds	r3, #1
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d9ef      	bls.n	80049ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049cc:	480d      	ldr	r0, [pc, #52]	; (8004a04 <prvInitialiseTaskLists+0x64>)
 80049ce:	f7fe fe7b 	bl	80036c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049d2:	480d      	ldr	r0, [pc, #52]	; (8004a08 <prvInitialiseTaskLists+0x68>)
 80049d4:	f7fe fe78 	bl	80036c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049d8:	480c      	ldr	r0, [pc, #48]	; (8004a0c <prvInitialiseTaskLists+0x6c>)
 80049da:	f7fe fe75 	bl	80036c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049de:	480c      	ldr	r0, [pc, #48]	; (8004a10 <prvInitialiseTaskLists+0x70>)
 80049e0:	f7fe fe72 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049e4:	480b      	ldr	r0, [pc, #44]	; (8004a14 <prvInitialiseTaskLists+0x74>)
 80049e6:	f7fe fe6f 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <prvInitialiseTaskLists+0x78>)
 80049ec:	4a05      	ldr	r2, [pc, #20]	; (8004a04 <prvInitialiseTaskLists+0x64>)
 80049ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <prvInitialiseTaskLists+0x7c>)
 80049f2:	4a05      	ldr	r2, [pc, #20]	; (8004a08 <prvInitialiseTaskLists+0x68>)
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000284 	.word	0x20000284
 8004a04:	20000310 	.word	0x20000310
 8004a08:	20000324 	.word	0x20000324
 8004a0c:	20000340 	.word	0x20000340
 8004a10:	20000354 	.word	0x20000354
 8004a14:	2000036c 	.word	0x2000036c
 8004a18:	20000338 	.word	0x20000338
 8004a1c:	2000033c 	.word	0x2000033c

08004a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a26:	e019      	b.n	8004a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a28:	f000 faac 	bl	8004f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <prvCheckTasksWaitingTermination+0x50>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fecf 	bl	80037dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4a0b      	ldr	r2, [pc, #44]	; (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <prvCheckTasksWaitingTermination+0x58>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <prvCheckTasksWaitingTermination+0x58>)
 8004a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a52:	f000 fac7 	bl	8004fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f810 	bl	8004a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <prvCheckTasksWaitingTermination+0x58>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e1      	bne.n	8004a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000354 	.word	0x20000354
 8004a74:	20000380 	.word	0x20000380
 8004a78:	20000368 	.word	0x20000368

08004a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fc24 	bl	80052e0 <vPortFree>
				vPortFree( pxTCB );
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fc21 	bl	80052e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a9e:	e018      	b.n	8004ad2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d103      	bne.n	8004ab2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fc18 	bl	80052e0 <vPortFree>
	}
 8004ab0:	e00f      	b.n	8004ad2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d00a      	beq.n	8004ad2 <prvDeleteTCB+0x56>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60fb      	str	r3, [r7, #12]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <prvDeleteTCB+0x54>
	}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <prvResetNextTaskUnblockTime+0x38>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <prvResetNextTaskUnblockTime+0x3c>)
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295
 8004af2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004af4:	e008      	b.n	8004b08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <prvResetNextTaskUnblockTime+0x38>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <prvResetNextTaskUnblockTime+0x3c>)
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000338 	.word	0x20000338
 8004b18:	200003a0 	.word	0x200003a0

08004b1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <xTaskGetSchedulerState+0x34>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	e008      	b.n	8004b42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <xTaskGetSchedulerState+0x38>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	e001      	b.n	8004b42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b42:	687b      	ldr	r3, [r7, #4]
	}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	2000038c 	.word	0x2000038c
 8004b54:	200003a8 	.word	0x200003a8

08004b58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d06e      	beq.n	8004c4c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b6e:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <xTaskPriorityDisinherit+0x100>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d00a      	beq.n	8004b8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60fb      	str	r3, [r7, #12]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60bb      	str	r3, [r7, #8]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d044      	beq.n	8004c4c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d140      	bne.n	8004c4c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fe04 	bl	80037dc <uxListRemove>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d115      	bne.n	8004c06 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bde:	491f      	ldr	r1, [pc, #124]	; (8004c5c <xTaskPriorityDisinherit+0x104>)
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xTaskPriorityDisinherit+0xae>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <xTaskPriorityDisinherit+0x108>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4013      	ands	r3, r2
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <xTaskPriorityDisinherit+0x108>)
 8004c04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	f1c3 0207 	rsb	r2, r3, #7
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	2201      	movs	r2, #1
 8004c20:	409a      	lsls	r2, r3
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <xTaskPriorityDisinherit+0x108>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <xTaskPriorityDisinherit+0x108>)
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <xTaskPriorityDisinherit+0x104>)
 8004c3a:	441a      	add	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7fe fd6d 	bl	8003722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c4c:	697b      	ldr	r3, [r7, #20]
	}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000280 	.word	0x20000280
 8004c5c:	20000284 	.word	0x20000284
 8004c60:	20000388 	.word	0x20000388

08004c64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c74:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fdae 	bl	80037dc <uxListRemove>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43da      	mvns	r2, r3
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d10a      	bne.n	8004cbc <prvAddCurrentTaskToDelayedList+0x58>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	481a      	ldr	r0, [pc, #104]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cb6:	f7fe fd34 	bl	8003722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cba:	e026      	b.n	8004d0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d209      	bcs.n	8004ce8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe fd42 	bl	800376a <vListInsert>
}
 8004ce6:	e010      	b.n	8004d0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7fe fd38 	bl	800376a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d202      	bcs.n	8004d0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d04:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6013      	str	r3, [r2, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000384 	.word	0x20000384
 8004d18:	20000280 	.word	0x20000280
 8004d1c:	20000388 	.word	0x20000388
 8004d20:	2000036c 	.word	0x2000036c
 8004d24:	2000033c 	.word	0x2000033c
 8004d28:	20000338 	.word	0x20000338
 8004d2c:	200003a0 	.word	0x200003a0

08004d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3b04      	subs	r3, #4
 8004d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d60:	4a0c      	ldr	r2, [pc, #48]	; (8004d94 <pxPortInitialiseStack+0x64>)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b14      	subs	r3, #20
 8004d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3b04      	subs	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f06f 0202 	mvn.w	r2, #2
 8004d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b20      	subs	r3, #32
 8004d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d86:	68fb      	ldr	r3, [r7, #12]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	08004d99 	.word	0x08004d99

08004d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <prvTaskExitError+0x54>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d00a      	beq.n	8004dc2 <prvTaskExitError+0x2a>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	60fb      	str	r3, [r7, #12]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <prvTaskExitError+0x28>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60bb      	str	r3, [r7, #8]
}
 8004dd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dd6:	bf00      	nop
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0fc      	beq.n	8004dd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	2000000c 	.word	0x2000000c

08004df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <pxCurrentTCBConst2>)
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	6808      	ldr	r0, [r1, #0]
 8004df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	f380 8809 	msr	PSP, r0
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8811 	msr	BASEPRI, r0
 8004e0a:	4770      	bx	lr
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst2>:
 8004e10:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e18:	4808      	ldr	r0, [pc, #32]	; (8004e3c <prvPortStartFirstTask+0x24>)
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f380 8808 	msr	MSP, r0
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8814 	msr	CONTROL, r0
 8004e2a:	b662      	cpsie	i
 8004e2c:	b661      	cpsie	f
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	df00      	svc	0
 8004e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e3a:	bf00      	nop
 8004e3c:	e000ed08 	.word	0xe000ed08

08004e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e46:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <xPortStartScheduler+0x120>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <xPortStartScheduler+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10a      	bne.n	8004e66 <xPortStartScheduler+0x26>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e66:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <xPortStartScheduler+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <xPortStartScheduler+0x128>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10a      	bne.n	8004e86 <xPortStartScheduler+0x46>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e86:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <xPortStartScheduler+0x12c>)
 8004e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <xPortStartScheduler+0x130>)
 8004eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <xPortStartScheduler+0x134>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb4:	e009      	b.n	8004eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <xPortStartScheduler+0x134>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <xPortStartScheduler+0x134>)
 8004ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d0ef      	beq.n	8004eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <xPortStartScheduler+0x134>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1c3 0307 	rsb	r3, r3, #7
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00a      	beq.n	8004ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <xPortStartScheduler+0x134>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f2e:	f000 f8dd 	bl	80050ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <xPortStartScheduler+0x13c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f38:	f000 f8fc 	bl	8005134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <xPortStartScheduler+0x140>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <xPortStartScheduler+0x140>)
 8004f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f48:	f7ff ff66 	bl	8004e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f4c:	f7ff fbaa 	bl	80046a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004f50:	f7ff ff22 	bl	8004d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000ed00 	.word	0xe000ed00
 8004f64:	410fc271 	.word	0x410fc271
 8004f68:	410fc270 	.word	0x410fc270
 8004f6c:	e000e400 	.word	0xe000e400
 8004f70:	200003ac 	.word	0x200003ac
 8004f74:	200003b0 	.word	0x200003b0
 8004f78:	e000ed20 	.word	0xe000ed20
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	e000ef34 	.word	0xe000ef34

08004f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	607b      	str	r3, [r7, #4]
}
 8004f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <vPortEnterCritical+0x58>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <vPortEnterCritical+0x58>)
 8004fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <vPortEnterCritical+0x58>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10f      	bne.n	8004fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <vPortEnterCritical+0x5c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	603b      	str	r3, [r7, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <vPortEnterCritical+0x4a>
	}
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <vPortExitCritical+0x50>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <vPortExitCritical+0x24>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	607b      	str	r3, [r7, #4]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <vPortExitCritical+0x50>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3b01      	subs	r3, #1
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <vPortExitCritical+0x50>)
 8005010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <vPortExitCritical+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <vPortExitCritical+0x42>
 800501a:	2300      	movs	r3, #0
 800501c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
	...

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f01e 0f10 	tst.w	lr, #16
 8005050:	bf08      	it	eq
 8005052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005064:	f380 8811 	msr	BASEPRI, r0
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f7ff fb18 	bl	80046a4 <vTaskSwitchContext>
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f380 8811 	msr	BASEPRI, r0
 800507c:	bc09      	pop	{r0, r3}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	f01e 0f10 	tst.w	lr, #16
 800508a:	bf08      	it	eq
 800508c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005090:	f380 8809 	msr	PSP, r0
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst>:
 80050a0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050c2:	f7ff fa37 	bl	8004534 <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SysTick_Handler+0x40>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <vPortSetupTimerInterrupt+0x40>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <vPortSetupTimerInterrupt+0x44>)
 800510a:	3b01      	subs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800510e:	4b04      	ldr	r3, [pc, #16]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	10624dd3 	.word	0x10624dd3
 8005130:	e000e014 	.word	0xe000e014

08005134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005144 <vPortEnableVFP+0x10>
 8005138:	6801      	ldr	r1, [r0, #0]
 800513a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800513e:	6001      	str	r1, [r0, #0]
 8005140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005142:	bf00      	nop
 8005144:	e000ed88 	.word	0xe000ed88

08005148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005154:	f7ff f944 	bl	80043e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <pvPortMalloc+0x180>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005160:	f000 f920 	bl	80053a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <pvPortMalloc+0x184>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8093 	bne.w	8005298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01d      	beq.n	80051b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005178:	2208      	movs	r2, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d014      	beq.n	80051b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <pvPortMalloc+0x6c>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	617b      	str	r3, [r7, #20]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d06e      	beq.n	8005298 <pvPortMalloc+0x150>
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <pvPortMalloc+0x188>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d869      	bhi.n	8005298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <pvPortMalloc+0x18c>)
 80051c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <pvPortMalloc+0x18c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ce:	e004      	b.n	80051da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d903      	bls.n	80051ec <pvPortMalloc+0xa4>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f1      	bne.n	80051d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <pvPortMalloc+0x180>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d050      	beq.n	8005298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2208      	movs	r2, #8
 80051fc:	4413      	add	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	2308      	movs	r3, #8
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	429a      	cmp	r2, r3
 8005216:	d91f      	bls.n	8005258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <pvPortMalloc+0xf8>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005252:	69b8      	ldr	r0, [r7, #24]
 8005254:	f000 f908 	bl	8005468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <pvPortMalloc+0x188>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <pvPortMalloc+0x188>)
 8005264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <pvPortMalloc+0x188>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <pvPortMalloc+0x190>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <pvPortMalloc+0x188>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <pvPortMalloc+0x190>)
 8005278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <pvPortMalloc+0x184>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	431a      	orrs	r2, r3
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <pvPortMalloc+0x194>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a11      	ldr	r2, [pc, #68]	; (80052dc <pvPortMalloc+0x194>)
 8005296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005298:	f7ff f8b0 	bl	80043fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <pvPortMalloc+0x174>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <pvPortMalloc+0x172>
	return pvReturn;
 80052bc:	69fb      	ldr	r3, [r7, #28]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20003fbc 	.word	0x20003fbc
 80052cc:	20003fd0 	.word	0x20003fd0
 80052d0:	20003fc0 	.word	0x20003fc0
 80052d4:	20003fb4 	.word	0x20003fb4
 80052d8:	20003fc4 	.word	0x20003fc4
 80052dc:	20003fc8 	.word	0x20003fc8

080052e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04d      	beq.n	800538e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052f2:	2308      	movs	r3, #8
 80052f4:	425b      	negs	r3, r3
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4b24      	ldr	r3, [pc, #144]	; (8005398 <vPortFree+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <vPortFree+0x44>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <vPortFree+0x62>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60bb      	str	r3, [r7, #8]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <vPortFree+0xb8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11a      	bne.n	800538e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <vPortFree+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005368:	f7ff f83a 	bl	80043e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vPortFree+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4413      	add	r3, r2
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <vPortFree+0xbc>)
 8005378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800537a:	6938      	ldr	r0, [r7, #16]
 800537c:	f000 f874 	bl	8005468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <vPortFree+0xc0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <vPortFree+0xc0>)
 8005388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800538a:	f7ff f837 	bl	80043fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20003fd0 	.word	0x20003fd0
 800539c:	20003fc0 	.word	0x20003fc0
 80053a0:	20003fcc 	.word	0x20003fcc

080053a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <prvHeapInit+0xac>)
 80053b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3307      	adds	r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <prvHeapInit+0xac>)
 80053d4:	4413      	add	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053dc:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <prvHeapInit+0xb0>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053e2:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <prvHeapInit+0xb0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053f0:	2208      	movs	r2, #8
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0307 	bic.w	r3, r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <prvHeapInit+0xb4>)
 8005404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <prvHeapInit+0xb4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <prvHeapInit+0xb4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <prvHeapInit+0xb4>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <prvHeapInit+0xb8>)
 8005432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <prvHeapInit+0xbc>)
 800543a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <prvHeapInit+0xc0>)
 800543e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	200003b4 	.word	0x200003b4
 8005454:	20003fb4 	.word	0x20003fb4
 8005458:	20003fbc 	.word	0x20003fbc
 800545c:	20003fc4 	.word	0x20003fc4
 8005460:	20003fc0 	.word	0x20003fc0
 8005464:	20003fd0 	.word	0x20003fd0

08005468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005470:	4b28      	ldr	r3, [pc, #160]	; (8005514 <prvInsertBlockIntoFreeList+0xac>)
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e002      	b.n	800547c <prvInsertBlockIntoFreeList+0x14>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d8f7      	bhi.n	8005476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d108      	bne.n	80054aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d118      	bne.n	80054f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <prvInsertBlockIntoFreeList+0xb0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d00d      	beq.n	80054e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e008      	b.n	80054f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <prvInsertBlockIntoFreeList+0xb0>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e003      	b.n	80054f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d002      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20003fb4 	.word	0x20003fb4
 8005518:	20003fbc 	.word	0x20003fbc

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4d0d      	ldr	r5, [pc, #52]	; (8005554 <__libc_init_array+0x38>)
 8005520:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	2600      	movs	r6, #0
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	4d0b      	ldr	r5, [pc, #44]	; (800555c <__libc_init_array+0x40>)
 800552e:	4c0c      	ldr	r4, [pc, #48]	; (8005560 <__libc_init_array+0x44>)
 8005530:	f000 f82e 	bl	8005590 <_init>
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	2600      	movs	r6, #0
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f855 3b04 	ldr.w	r3, [r5], #4
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f855 3b04 	ldr.w	r3, [r5], #4
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	080055fc 	.word	0x080055fc
 8005558:	080055fc 	.word	0x080055fc
 800555c:	080055fc 	.word	0x080055fc
 8005560:	08005600 	.word	0x08005600

08005564 <memcpy>:
 8005564:	440a      	add	r2, r1
 8005566:	4291      	cmp	r1, r2
 8005568:	f100 33ff 	add.w	r3, r0, #4294967295
 800556c:	d100      	bne.n	8005570 <memcpy+0xc>
 800556e:	4770      	bx	lr
 8005570:	b510      	push	{r4, lr}
 8005572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800557a:	4291      	cmp	r1, r2
 800557c:	d1f9      	bne.n	8005572 <memcpy+0xe>
 800557e:	bd10      	pop	{r4, pc}

08005580 <memset>:
 8005580:	4402      	add	r2, r0
 8005582:	4603      	mov	r3, r0
 8005584:	4293      	cmp	r3, r2
 8005586:	d100      	bne.n	800558a <memset+0xa>
 8005588:	4770      	bx	lr
 800558a:	f803 1b01 	strb.w	r1, [r3], #1
 800558e:	e7f9      	b.n	8005584 <memset+0x4>

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
